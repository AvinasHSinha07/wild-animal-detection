import React, {useId, useState, useEffect } from 'react';
import * as ImagePicker from 'expo-image-picker';
import { auth, db, firestore } from '../firebaseConfig';
import { View, Text,ScrollView, Button, StyleSheet, TouchableOpacity, Image, navigation , Pressable} from 'react-native';

import { Timestamp,doc, getDoc, collection, getDocs,query, where,uid, serverTimestamp, setDoc, addDoc, updateDoc} from 'firebase/firestore';
import { FontAwesome } from '@expo/vector-icons'; 
import AsyncStorage from '@react-native-async-storage/async-storage';


const UserProfile = ({navigation}) => {
  const [userData, setUserData] = useState(null);

  const randomId = useId();
  const [newImageUri, setnewImageUri] = useState(null)
  const [imageUri, setImageUri] = useState(null);
 
  const storageUrl = 'wild-animal-detection-28089.appspot.com';
 

  const handleImagePick = async () => {
    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
    if (status !== 'granted') {
      Alert.alert('Permission denied', 'Sorry, we need camera roll permissions to make this work!');
      return;
    }
  
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [1, 1],
      quality: 1,
    });
    if (!result.canceled) {
      try {
        setnewImageUri(result.assets[0].uri);
        setImageUri(result.assets[0].uri)

        const fileName = `profile/${userData.userRef}.jpg`;

        try {
          const response = await fetch(
            'https://firebasestorage.googleapis.com/v0/b/'+storageUrl+'/o?name='+fileName,
            {
              method: 'POST',
              headers: {
                'Content-Type': 'image/jpeg' || 'image/png' || 'image/jpg',
              },
              body: await fetch(result.assets[0].uri).then((response) => response.blob()),
            }
          );
          if (response.ok) {
            try {
              const temp = userData
              temp.userProfilePic = fileName
              const userData2 = await AsyncStorage.getItem('userData');
              if(userData2){
                const user = JSON.stringify(temp);
                await AsyncStorage.setItem('userData',user)
              }
              setUserData(temp)
              await updateDoc( doc(db, 'users', userData.userRef), {dp_url:fileName});
            } catch (error) {
              console.error('Error updating profile picture:', error);
              alert('Something went wrong')
            }
            alert('Profile Information Updated')
  
          } 
          else {
            console.error('Error uploading image:', response.statusText);
          }
         } 
         catch (error) {
          console.error('Error uploading image 2:', error);
        }
        
      } catch (error) {
        console.log('Error uploading image 3:', error);
        Alert.alert('Upload Failed', 'Failed to upload image. Please try again later.');
      }
    }
  };

  const getImageUrlToShow = (image)=>{
    const imageUrl = `https://firebasestorage.googleapis.com/v0/b/${storageUrl}/o/${encodeURIComponent(image)}?alt=media`;
    return imageUrl
  }

  const preFetchDP = (userProfilePic)=>{
    const imageRef = getImageUrlToShow(userProfilePic)
    setImageUri(imageRef)
    setnewImageUri(imageRef)
  }

  // console.log(imageUri)
  const uploadAnImage = async () => {
    try{
      let result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [4, 4],
        quality: 1,
      });
  
      if (!result.canceled) {
        setnewImageUri(result.assets[0].uri);
        setImageUri(result.assets[0].uri)
      }
    }
    catch(e){
      console.log(e)
    }
    
  };


  useEffect(() => {
    const getUser = async () => {
      try {
        const userEmail = auth.currentUser.email; // Get the email of the logged-in user
        const usersRef = collection(db, 'users');
        const q = query(usersRef, where('email', '==', userEmail));
        const querySnapshot = await getDocs(q);
        
        querySnapshot.forEach((doc) => {
          const userData = doc.data();
          setUserData(userData);
          preFetchDP(userData.dp_url);
        });
      } catch (error) {
        console.error('Error fetching user data:', error);
        Alert.alert('Error', 'Failed to fetch user data. Please try again later.');
      }
    };

    getUser();
  }, []);

  useEffect(() => {
    if (userData) preFetchDP(userData.dp_url);
  }, [userData]);

  return (
    <View style={styles.container}>
      <ScrollView showsVerticalScrollIndicator={false}>
        {userData && (
          <View style={styles.profileContainer}>
            <TouchableOpacity onPress={handleImagePick}>
              <Image source={{ uri: imageUri }} style={styles.image} />
            </TouchableOpacity>

            <Text style={styles.label}>Name:</Text>
            <Text style={styles.text}>{userData.userName}</Text>
            <Text style={styles.label}>Email:</Text>
            <Text style={styles.text}>{userData.email}</Text>
            <Text style={styles.label}>BirthDay:</Text>
            <Text style={styles.text}>{userData.birthday}</Text>
            <Text style={styles.label}>Country:</Text>
            <Text style={styles.text}>{userData.country}</Text>
            <Text style={styles.label}>Gender:</Text>
            <Text style={styles.text}>{userData.gender}</Text>
            <Text style={styles.label}>Joining Date:</Text>
            <Text style={styles.text}>{userData.joiningDate?.toDate().toString()}</Text>
            <Button title="Go Back" onPress={() => navigation.navigate('Home')} />
          </View>
        )}
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
  },
  image: {
    width: 150,
    height: 150,
    borderRadius: 75,
    marginBottom: 20,
  },
  profileContainer: {
    backgroundColor: '#fff',
    padding: 20,
    borderRadius: 10,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 4,
    elevation: 5,
    marginBottom: 20,
  },
  label: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 5,
  },
  text: {
    fontSize: 16,
    marginBottom: 10,
  },
});

export default UserProfile;